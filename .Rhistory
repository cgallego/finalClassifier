0.01
1/50
0.01^0.02
0.01^0.1
0.1^0.1
0.1^0.02
library(MASS)
library(ISLR)
install.packages("ISLR")
library(ISLR)
names(Boston)
?Boston
plot(medv~lstat, data=Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
#
fit2=lm(medv~lstat+age,data=Boston)
summary(fit2)
fit3=lm(medv~.,Boston)
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit4=update(fit3,~.-age-indus)
summary(fit4)
fit5=lm(medv~lstat*age,Boston)
summary(fit5)
fit6=lm(medv~lstat +I(lstat^2),Boston); summary(fit6)
attach(Boston)
par(mfrow=c(1,1))
plot(medv~lstat)
points(lstat,fitted(fit6),col="red",pch=20)
points(lstat,fitted(fit7),col="blue",pch=20)
plot(1:20,1:20,pch=1:20,cex=2)
fix(Carseats)
names(Carseats)
summary(Carseats)
plot(1:20,1:20,pch=1:20,cex=2, col=1:10)
plot(1:20,1:20,pch=1:20,cex=2, col=1:20)
fit1=lm(Sales~.+Income:Advertising+Age:Price,Carseats)
summary(fit1)
contrasts(Carseats$ShelveLoc)
regplot=function(x,y){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
attach(Carseats)
regplot(Price,Sales)
regplot=function(x,y,...){
fit=lm(y~x)
plot(x,y,...)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price",ylab="Sales",col="blue",pch=20)
load(url("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/ESL.mixture.rda"))
names(ESL.mixture)
rm(x,y)
attach(ESL.mixture)
plot(x,col=y+1)
dat=data.frame(y=factor(y),x)
fit=svm(factor(y)~.,data=dat,scale=FALSE,kernel="radial",cost=5)
xgrid=expand.grid(X1=px1,X2=px2)
ygrid=predict(fit,xgrid)
plot(xgrid,col=as.numeric(ygrid),pch=20,cex=.2)
points(x,col=y+1,pch=19)
xgrid=expand.grid(X1=px1,X2=px2)
ygrid=predict(fit,xgrid)
library(e1071)
ygrid=predict(fit,xgrid)
make.grid=function(x,n=75){
grange=apply(x,2,range)
x1=seq(from=grange[1,1],to=grange[2,1],length=n)
x2=seq(from=grange[1,2],to=grange[2,2],length=n)
expand.grid(X1=x1,X2=x2)
}
ygrid=predict(fit,xgrid)
plot(xgrid,col=as.numeric(ygrid),pch=20,cex=.2)
points(x,col=y+1,pch=19)
dat=data.frame(y=factor(y),x)
fit=svm(factor(y)~.,data=dat,scale=FALSE,kernel="radial",cost=5)
ygrid=predict(fit,xgrid)
plot(xgrid,col=as.numeric(ygrid),pch=20,cex=.2)
points(x,col=y+1,pch=19)
func=predict(fit,xgrid,decision.values=TRUE)
func=attributes(func)$decision
?predict
xgrid=expand.grid(X1=px1,X2=px2)
ygrid=predict(fit,xgrid)
plot(xgrid,col=as.numeric(ygrid),pch=20,cex=.2)
points(x,col=y+1,pch=19)
contour(px1,px2,matrix(func,69,99),level=0,add=TRUE)
contour(px1,px2,matrix(prob,69,99),level=.5,add=TRUE,col="blue",lwd=2)
dimnames(USArrests)
apply(USArrests,2,mean)
apply(USArrests,2, var)
pca.out=prcomp(USArrests, scale=TRUE)
pca.out
names(pca.out)
biplot(pca.out, scale=0)
a=c(1:10)
a
a=c(1:2:10)
linspace
?linspace
?iter
?c
24/5
a=c(1:10)
?seq
seq(1,25,24/5)
seq(1,25,int(24/5)
)
seq(1,25,round(24/5)
)
b=seq(10,25,round(24/5)
)
n
b
list(c(1:10),b)
c(c(1:10),b)
RFGrid <- expand.grid(.mtry=c( c(1:10),seq(15,within5Pct-1,5)) )
features <- read.table("4class_allFeatures.txt", header=T)
setwd("Z:/Cristina/MassNonmass/codeProject/codeBase/finalClassifier")
features <- read.table("4class_allFeatures.txt", header=T)
View(features)
casefeatures=features[202,]
View(casefeatures)
casefeatures=features[201,]
View(casefeatures)
RFcascade <- readRDS("C:/Users/windows/Documents/repoCode/finalClassifier/RFcascadeoutput.rds")
#
### Select subsets of features correspondingly
set1_selfeatures <- casefeatures[c("BenignNMaligNAnt",
"circularity",
"Tpeak.inside",
"Slope_ini.inside",
"SER.inside",
"SER.countor",
"Kpeak.inside",
"iiMin_change_Variance_uptake",
"iMax_Variance_uptake",
"Kpeak.countor")]
## compute classifier stage 1
RFmodel1 <- list(RFmodel1 = RFcascade$set1_RFfit)
RFmodel1_predValues <- extractPrediction(RFmodel1, testX= set1_selfeatures[,1:10], testY= set1_selfeatures[,1])
print( table(RFmodel1_predValues) )
RFmodel1_probValues <- extractProb(RFmodel1, testX=set1_selfeatures[,1:10], testY=set1_selfeatures[,1])
MNm_probValues <- subset(RFmodel1_probValues, dataType=="Test")
# instantiate the 2nd stage RF classifiers
RFmodelM <- list(RFmodelM = RFcascade$set2_RFfit)
RFmodelNonM <- list(RFmodelNonM = RFcascade$set3_RFfit)
library(caret)
library(randomForest)
## compute classifier stage 1
RFmodel1 <- list(RFmodel1 = RFcascade$set1_RFfit)
RFmodel1_predValues <- extractPrediction(RFmodel1, testX= set1_selfeatures[,1:10], testY= set1_selfeatures[,1])
print( table(RFmodel1_predValues) )
RFmodel1_probValues <- extractProb(RFmodel1, testX=set1_selfeatures[,1:10], testY=set1_selfeatures[,1])
MNm_probValues <- subset(RFmodel1_probValues, dataType=="Test")
MNm_probValues
View(casefeatures)
casefeatures$BenignNMaligNAnt="mass"
RFmodel1 <- list(RFmodel1 = RFcascade$set1_RFfit)
RFmodel1_predValues <- extractPrediction(RFmodel1, testX= set1_selfeatures[,1:10], testY= set1_selfeatures[,1])
print( table(RFmodel1_predValues) )
set1_selfeatures[,2:10]
RFmodel1 <- list(RFmodel1 = RFcascade$set1_RFfit)
RFmodel1_predValues <- extractPrediction(RFmodel1, testX= set1_selfeatures[,2:10], testY= set1_selfeatures[,1])
print( table(RFmodel1_predValues) )
RFmodel1_probValues <- extractProb(RFmodel1, testX=set1_selfeatures[,2:10], testY=set1_selfeatures[,1])
MNm_probValues <- subset(RFmodel1_probValues, dataType=="Test")
MNm_probValues
### Select subsets of features correspondingly
set1_selfeatures <- casefeatures[c("BenignNMaligNAnt",
"circularity",
"Tpeak.inside",
"Slope_ini.inside",
"SER.inside",
"SER.countor",
"Kpeak.inside",
"iiMin_change_Variance_uptake",
"iMax_Variance_uptake",
"Kpeak.countor")]
## compute classifier stage 1
RFmodel1 <- list(RFmodel1 = RFcascade$set1_RFfit)
RFmodel1_predValues <- extractPrediction(RFmodel1, testX= set1_selfeatures[,2:10], testY= set1_selfeatures[,1])
print( table(RFmodel1_predValues) )
RFmodel1_probValues <- extractProb(RFmodel1, testX=set1_selfeatures[,2:10], testY=set1_selfeatures[,1])
MNm_probValues <- subset(RFmodel1_probValues, dataType=="Test")
# instantiate the 2nd stage RF classifiers
RFmodelM <- list(RFmodelM = RFcascade$set2_RFfit)
RFmodelNonM <- list(RFmodelNonM = RFcascade$set3_RFfit)
#subseting to fed into 2nd stage
M.boot <- subset(MNm_probValues, pred=="mass")
NonM.boot<- subset(MNm_probValues, pred=="nonmass")
##
if( !empty(M.boot) ){
set2_selfeatures <- casefeatures[c("BenignNMaligNAnt",
"Kpeak.countor",
"beta.countor",
"irregularity",
"washoutRate.contour",
"UptakeRate.contour",
"SER.countor",
"Tpeak.countor",
"A.countor",
"min_F_r_i",
"maxCr.contour",
"circularity",
"beta.inside",
"UptakeRate.inside",
"texture_energy_threeQuaRad",
"iAUC1.countor",
"texture_ASM_threeQuaRad",
"Kpeak.inside",
"alpha.inside",
"Vr_increasingRate.inside",
"maxVr.inside",
"texture_ASM_quarterRad",
"texture_energy_quarterRad",
"maxCr.inside",
"max_F_r_i",
"A.inside",
"texture_energy_zero",
"iAUC1.inside",
"texture_contrast_quarterRad",
"Tpeak.inside",
"peakCr.contour",
"texture_contrast_halfRad",
"Vr_post_1.inside",
"alpha.countor",
"texture_homogeneity_quarterRad",
"texture_contrast_threeQuaRad",
"Slope_ini.countor",
"texture_ASM_zero",
"texture_energy_halfRad",
"texture_ASM_halfRad",
"texture_contrast_zero",
"Vr_decreasingRate.contour",
"SER.inside",
"mean_F_r_i",
"Vr_increasingRate.contour",
"var_F_r_i")]
# relabel down the cascade
ifelse( casefeatures$labels == "massB", "NC", "C") -> set2_selfeatures$BenignNMaligNAnt
}
casefeatures$labels
casefeatures$labels = "massM"
if( !empty(M.boot) ){
set2_selfeatures <- casefeatures[c("BenignNMaligNAnt",
"Kpeak.countor",
"beta.countor",
"irregularity",
"washoutRate.contour",
"UptakeRate.contour",
"SER.countor",
"Tpeak.countor",
"A.countor",
"min_F_r_i",
"maxCr.contour",
"circularity",
"beta.inside",
"UptakeRate.inside",
"texture_energy_threeQuaRad",
"iAUC1.countor",
"texture_ASM_threeQuaRad",
"Kpeak.inside",
"alpha.inside",
"Vr_increasingRate.inside",
"maxVr.inside",
"texture_ASM_quarterRad",
"texture_energy_quarterRad",
"maxCr.inside",
"max_F_r_i",
"A.inside",
"texture_energy_zero",
"iAUC1.inside",
"texture_contrast_quarterRad",
"Tpeak.inside",
"peakCr.contour",
"texture_contrast_halfRad",
"Vr_post_1.inside",
"alpha.countor",
"texture_homogeneity_quarterRad",
"texture_contrast_threeQuaRad",
"Slope_ini.countor",
"texture_ASM_zero",
"texture_energy_halfRad",
"texture_ASM_halfRad",
"texture_contrast_zero",
"Vr_decreasingRate.contour",
"SER.inside",
"mean_F_r_i",
"Vr_increasingRate.contour",
"var_F_r_i")]
# relabel down the cascade
ifelse( casefeatures$labels == "massB", "NC", "C") -> set2_selfeatures$BenignNMaligNAnt
}
if( !empty(M.boot) ){
set2_selfeatures <- casefeatures[c("BenignNMaligNAnt",
"Kpeak.countor",
"beta.countor",
"irregularity",
"washoutRate.contour",
"UptakeRate.contour",
"SER.countor",
"Tpeak.countor",
"A.countor",
"min_F_r_i",
"maxCr.contour",
"circularity",
"beta.inside",
"UptakeRate.inside",
"texture_energy_threeQuaRad",
"iAUC1.countor",
"texture_ASM_threeQuaRad",
"Kpeak.inside",
"alpha.inside",
"Vr_increasingRate.inside",
"maxVr.inside",
"texture_ASM_quarterRad",
"texture_energy_quarterRad",
"maxCr.inside",
"max_F_r_i",
"A.inside",
"texture_energy_zero",
"iAUC1.inside",
"texture_contrast_quarterRad",
"Tpeak.inside",
"peakCr.contour",
"texture_contrast_halfRad",
"Vr_post_1.inside",
"alpha.countor",
"texture_homogeneity_quarterRad",
"texture_contrast_threeQuaRad",
"Slope_ini.countor",
"texture_ASM_zero",
"texture_energy_halfRad",
"texture_ASM_halfRad",
"texture_contrast_zero",
"Vr_decreasingRate.contour",
"SER.inside",
"mean_F_r_i",
"Vr_increasingRate.contour",
"var_F_r_i")]
# relabel down the cascade
ifelse( casefeatures$labels == "massB", "NC", "C") -> set2_selfeatures$BenignNMaligNAnt
if( !empty(M.boot) ){
set2_selfeatures <- casefeatures[c("BenignNMaligNAnt",
"Kpeak.countor",
"beta.countor",
"irregularity",
"washoutRate.contour",
"UptakeRate.contour",
"SER.countor",
"Tpeak.countor",
"A.countor",
"min_F_r_i",
"maxCr.contour",
"circularity",
"beta.inside",
"UptakeRate.inside",
"texture_energy_threeQuaRad",
"iAUC1.countor",
"texture_ASM_threeQuaRad",
"Kpeak.inside",
"alpha.inside",
"Vr_increasingRate.inside",
"maxVr.inside",
"texture_ASM_quarterRad",
"texture_energy_quarterRad",
"maxCr.inside",
"max_F_r_i",
"A.inside",
"texture_energy_zero",
"iAUC1.inside",
"texture_contrast_quarterRad",
"Tpeak.inside",
"peakCr.contour",
"texture_contrast_halfRad",
"Vr_post_1.inside",
"alpha.countor",
"texture_homogeneity_quarterRad",
"texture_contrast_threeQuaRad",
"Slope_ini.countor",
"texture_ASM_zero",
"texture_energy_halfRad",
"texture_ASM_halfRad",
"texture_contrast_zero",
"Vr_decreasingRate.contour",
"SER.inside",
"mean_F_r_i",
"Vr_increasingRate.contour",
"var_F_r_i")]
# relabel down the cascade
ifelse( casefeatures$labels == "massB", "NC", "C") -> set2_selfeatures$BenignNMaligNAnt
0)
casefeatures$labels
set2_selfeatures$BenignNMaligNAnt
probValuesM <- extractProb(RFmodelM, testX=set2_selfeatures[,2:46], testY=set2_selfeatures[,1])
probValuesM
k_probValuesM <- subset(probValuesM, dataType=="Test")
k_probValuesM
casestest = as.data.frame(setNames(replicate(10, 1, simplify = F), c("caseID", "labels", "pred1", "obs1", "P1", "N1", "pred2","obs2", "P2", "N2")))
casestest$caseID = as.character( casefeatures[c("id")] )
casestest$labels = as.character( casefeatures[c("labels")] )
casestest$pred1 = MNm_probValues$pred
casestest$obs1 = MNm_probValues$obs
casestest$P1 = MNm_probValues$mass
casestest$N1 = MNm_probValues$nonmass
casestest$pred2 = k_probValuesM$pred
casestest$obs2 = k_probValuesM$obs
casestest$P2 = k_probValuesM$C
casestest$N2 = k_probValuesM$NC
casestest
